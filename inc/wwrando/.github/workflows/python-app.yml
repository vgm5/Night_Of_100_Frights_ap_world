name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: Version
      env:
        description: Environment
        type: environment
        required: true
        default: "Production"

jobs:
  windows:
    runs-on: windows-latest
    environment: ${{ github.event.inputs.env || 'Development' }}
    strategy:
      matrix:
        architecture: [ x64 ]

    steps:
      - uses: actions/checkout@v3
      - name: Add keys
        run: |
            echo "$env:SEED_KEY" > keys/seed_key.py
            echo "$env:BUILD_KEY" > keys/build_key.txt
        env:
          SEED_KEY: ${{ secrets.SEED_KEY }}
          BUILD_KEY: ${{ secrets.BUILD_KEY }}
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.architecture }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements_full.txt
      - name: Set variables
        id: vars
        run: |
          USER_INPUT_VERSION=${{ github.event.inputs.version }}
          TXT_VERSION=$(cat version.txt)
          GIT_SHA_SHORT=$(git rev-parse --short=7 ${{ github.sha }})
          echo "full_version=${USER_INPUT_VERSION:-${TXT_VERSION}_${GIT_SHA_SHORT}}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Set version
        id: version
        run: |
          echo "${{ steps.vars.outputs.full_version }}" > version.txt
      - name: Build Windows App
        run: python -m PyInstaller --log-level=WARN wwrando.spec
      - name: Bundle Windows App
        run: python build.py
      - name: Upload Windows App
        uses: actions/upload-artifact@v3
        with:
          name: wwrando-${{ steps.vars.outputs.full_version }}-windows-${{ matrix.architecture }}
          path: dist/release_archive_${{ steps.vars.outputs.full_version }}_${{ matrix.architecture }}/*

  macos:
    runs-on: macos-latest
    environment: ${{ github.event.inputs.env || 'Development' }}
    strategy:
      matrix:
        architecture: [ x64 ]

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
      - uses: actions/checkout@v3
      - name: Add keys
        run: |
            echo "$SEED_KEY" > keys/seed_key.py
            echo "$BUILD_KEY" > keys/build_key.txt
        env:
          SEED_KEY: ${{ secrets.SEED_KEY }}
          BUILD_KEY: ${{ secrets.BUILD_KEY }}
      - name: Set up Miniconda with Python 3.10
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: '3.10'
          architecture: ${{ matrix.architecture }}
          miniconda-version: latest
          auto-update-conda: true
      - run: |
          conda create -qyf -n py310 python=3.10 wheel -c anaconda
          conda activate py310
        shell: bash -l {0}
      - name: Install dependencies
        run: |
          conda install pip
          python3 -m pip install -r requirements_full.txt
        shell: bash -l {0}
      - name: Set variables
        id: vars
        run: |
          USER_INPUT_VERSION=${{ github.event.inputs.version }}
          TXT_VERSION=$(cat version.txt)
          GIT_SHA_SHORT=$(git rev-parse --short=7 ${{ github.sha }})
          echo "full_version=${USER_INPUT_VERSION:-${TXT_VERSION}_${GIT_SHA_SHORT}}" >> $GITHUB_OUTPUT
      - name: Set version
        id: version
        run: |
          echo "${{ steps.vars.outputs.full_version }}" > version.txt
      - name: Build MacOS App
        run: python3 -m PyInstaller --log-level=WARN wwrando.spec
        shell: bash -l {0}
      - name: Bundle MacOS App
        run: python3 build.py
        shell: bash -l {0}
      - name: Upload MacOS App
        uses: actions/upload-artifact@v3
        with:
          name: wwrando-${{ steps.vars.outputs.full_version }}-macos-${{ matrix.architecture }}
          path: dist/release_archive_${{ steps.vars.outputs.full_version }}_${{ matrix.architecture }}.zip

  linux:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env || 'Development' }}
    strategy:
      matrix:
        architecture: [ x64 ]

    steps:
      - uses: actions/checkout@v3
      - name: Add keys
        run: |
            echo "$SEED_KEY" > keys/seed_key.py
            echo "$BUILD_KEY" > keys/build_key.txt
        env:
          SEED_KEY: ${{ secrets.SEED_KEY }}
          BUILD_KEY: ${{ secrets.BUILD_KEY }}
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.architecture }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements_full.txt
      - name: Install any missing Qt dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev
      - name: Set variables
        id: vars
        run: |
          USER_INPUT_VERSION=${{ github.event.inputs.version }}
          TXT_VERSION=$(cat version.txt)
          GIT_SHA_SHORT=$(git rev-parse --short=7 ${{ github.sha }})
          echo "full_version=${USER_INPUT_VERSION:-${TXT_VERSION}_${GIT_SHA_SHORT}}" >> $GITHUB_OUTPUT
      - name: Set version
        id: version
        run: |
          echo "${{ steps.vars.outputs.full_version }}" > version.txt
      - name: Build Linux App
        run: python -m PyInstaller --log-level=WARN wwrando.spec
      - name: Bundle Linux App
        run: python build.py
      - name: Upload Linux App
        uses: actions/upload-artifact@v3
        with:
          name: wwrando-${{ steps.vars.outputs.full_version }}-linux-${{ matrix.architecture }}
          path: dist/release_archive_${{ steps.vars.outputs.full_version }}_${{ matrix.architecture }}/*
